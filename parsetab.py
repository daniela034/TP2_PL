
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND ELSE END EQ GE ID IF INT LE MAIN NEQ NOT NUM OR READ REPEATE START STR UNTIL VOID WRITEmain : MAIN instrs ENDinstrs : instrs instrinstrs : instr\n       instr : atr endline   \n              | write endline   \n              | read endline\n              | endline\n              | cond\n              | cycle\n              | lexpr\n              |       \n\n      \n      endline : ';'\n      cond : IF '(' lexpr ')' START instrs START ELSE START instrs ENDcycle : REPEATE START '{' instrs '}' UNTIL '(' instrs ')' ENDwrite : WRITE ID write : WRITE STRatr : ID '=' exprread : READ IDlexpr : lexpr AND lexprlexpr : expr EQ exprlexpr : expr LE exprlexpr : expr GE exprlexpr : expr '>' exprlexpr : expr '<' exprlexpr : exprlexpr : '(' lexpr ')' expr : expr '+' exprexpr : expr '-' exprexpr : termterm : term '*' parterm : term '/' parterm : term '%' parterm : term AND parterm : parpar : '(' expr ')'par : NUMpar : IDpar : NOT lexpr"
    
_lr_action_items = {'MAIN':([0,],[2,]),'$end':([1,24,],[0,-1,]),'END':([2,3,4,6,9,10,11,12,13,16,20,21,22,25,26,27,28,44,50,51,54,55,56,57,58,59,60,62,63,65,66,67,68,80,81,82,83,84,],[-11,24,-3,-7,-8,-9,-10,-37,-25,-12,-29,-34,-36,-2,-4,-5,-6,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,-30,-31,-32,-33,-11,83,84,-14,-13,]),'ID':([2,3,4,6,9,10,11,12,13,14,15,16,18,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,41,44,46,47,48,49,50,51,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,71,72,74,77,79,80,82,83,84,],[12,12,-3,-7,-8,-9,-10,-37,-25,38,40,-12,44,-29,-34,-36,44,-2,-4,-5,-6,44,44,44,44,44,44,44,44,44,44,-37,44,44,44,44,-38,-19,44,-20,-21,-22,-23,-24,-27,-28,-26,-35,12,-30,-31,-32,-33,12,12,12,12,12,12,12,-14,-13,]),'WRITE':([2,3,4,6,9,10,11,12,13,16,20,21,22,25,26,27,28,44,50,51,54,55,56,57,58,59,60,62,63,64,65,66,67,68,71,72,74,77,79,80,82,83,84,],[14,14,-3,-7,-8,-9,-10,-37,-25,-12,-29,-34,-36,-2,-4,-5,-6,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,14,-30,-31,-32,-33,14,14,14,14,14,14,14,-14,-13,]),'READ':([2,3,4,6,9,10,11,12,13,16,20,21,22,25,26,27,28,44,50,51,54,55,56,57,58,59,60,62,63,64,65,66,67,68,71,72,74,77,79,80,82,83,84,],[15,15,-3,-7,-8,-9,-10,-37,-25,-12,-29,-34,-36,-2,-4,-5,-6,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,15,-30,-31,-32,-33,15,15,15,15,15,15,15,-14,-13,]),';':([2,3,4,5,6,7,8,9,10,11,12,13,16,20,21,22,25,26,27,28,38,39,40,44,50,51,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,71,72,74,77,79,80,82,83,84,],[16,16,-3,16,-7,16,16,-8,-9,-10,-37,-25,-12,-29,-34,-36,-2,-4,-5,-6,-15,-16,-18,-37,-38,-19,-17,-20,-21,-22,-23,-24,-27,-28,-26,-35,16,-30,-31,-32,-33,16,16,16,16,16,16,16,-14,-13,]),'IF':([2,3,4,6,9,10,11,12,13,16,20,21,22,25,26,27,28,44,50,51,54,55,56,57,58,59,60,62,63,64,65,66,67,68,71,72,74,77,79,80,82,83,84,],[17,17,-3,-7,-8,-9,-10,-37,-25,-12,-29,-34,-36,-2,-4,-5,-6,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,17,-30,-31,-32,-33,17,17,17,17,17,17,17,-14,-13,]),'REPEATE':([2,3,4,6,9,10,11,12,13,16,20,21,22,25,26,27,28,44,50,51,54,55,56,57,58,59,60,62,63,64,65,66,67,68,71,72,74,77,79,80,82,83,84,],[19,19,-3,-7,-8,-9,-10,-37,-25,-12,-29,-34,-36,-2,-4,-5,-6,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,19,-30,-31,-32,-33,19,19,19,19,19,19,19,-14,-13,]),'(':([2,3,4,6,9,10,11,12,13,16,17,18,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,41,44,46,47,48,49,50,51,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,71,72,74,75,77,79,80,82,83,84,],[18,18,-3,-7,-8,-9,-10,-37,-25,-12,41,18,-29,-34,-36,18,-2,-4,-5,-6,18,53,53,53,53,53,53,53,53,18,-37,53,53,53,53,-38,-19,53,-20,-21,-22,-23,-24,-27,-28,-26,-35,18,-30,-31,-32,-33,18,18,18,77,18,18,18,18,-14,-13,]),'NUM':([2,3,4,6,9,10,11,12,13,16,18,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,41,44,46,47,48,49,50,51,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,71,72,74,77,79,80,82,83,84,],[22,22,-3,-7,-8,-9,-10,-37,-25,-12,22,-29,-34,-36,22,-2,-4,-5,-6,22,22,22,22,22,22,22,22,22,22,-37,22,22,22,22,-38,-19,22,-20,-21,-22,-23,-24,-27,-28,-26,-35,22,-30,-31,-32,-33,22,22,22,22,22,22,22,-14,-13,]),'NOT':([2,3,4,6,9,10,11,12,13,16,18,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,41,44,46,47,48,49,50,51,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,71,72,74,77,79,80,82,83,84,],[23,23,-3,-7,-8,-9,-10,-37,-25,-12,23,-29,-34,-36,23,-2,-4,-5,-6,23,23,23,23,23,23,23,23,23,23,-37,23,23,23,23,-38,-19,23,-20,-21,-22,-23,-24,-27,-28,-26,-35,23,-30,-31,-32,-33,23,23,23,23,23,23,23,-14,-13,]),'}':([4,6,9,10,11,12,13,16,20,21,22,25,26,27,28,44,50,51,54,55,56,57,58,59,60,62,63,64,65,66,67,68,71,83,84,],[-3,-7,-8,-9,-10,-37,-25,-12,-29,-34,-36,-2,-4,-5,-6,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,-11,-30,-31,-32,-33,73,-14,-13,]),'START':([4,6,9,10,11,12,13,16,19,20,21,22,25,26,27,28,44,50,51,54,55,56,57,58,59,60,62,63,65,66,67,68,70,72,74,78,83,84,],[-3,-7,-8,-9,-10,-37,-25,-12,45,-29,-34,-36,-2,-4,-5,-6,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,-30,-31,-32,-33,72,-11,76,80,-14,-13,]),')':([4,6,9,10,11,12,13,16,20,21,22,25,26,27,28,42,43,44,50,51,54,55,56,57,58,59,60,61,62,63,65,66,67,68,69,77,79,83,84,],[-3,-7,-8,-9,-10,-37,-25,-12,-29,-34,-36,-2,-4,-5,-6,62,63,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,70,-26,-35,-30,-31,-32,-33,63,-11,81,-14,-13,]),'AND':([11,12,13,20,21,22,42,43,44,50,51,54,55,56,57,58,59,60,61,62,63,65,66,67,68,],[29,-37,-25,49,-34,-36,29,-25,-37,29,29,-20,-21,-22,-23,-24,-27,-28,29,-26,-35,-30,-31,-32,-33,]),'=':([12,],[30,]),'*':([12,13,20,21,22,44,50,51,54,55,56,57,58,59,60,62,63,65,66,67,68,],[-37,-25,46,-34,-36,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,-30,-31,-32,-33,]),'/':([12,13,20,21,22,44,50,51,54,55,56,57,58,59,60,62,63,65,66,67,68,],[-37,-25,47,-34,-36,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,-30,-31,-32,-33,]),'%':([12,13,20,21,22,44,50,51,54,55,56,57,58,59,60,62,63,65,66,67,68,],[-37,-25,48,-34,-36,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,-30,-31,-32,-33,]),'EQ':([12,13,20,21,22,43,44,50,51,54,55,56,57,58,59,60,62,63,65,66,67,68,],[-37,31,-29,-34,-36,31,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,-30,-31,-32,-33,]),'LE':([12,13,20,21,22,43,44,50,51,54,55,56,57,58,59,60,62,63,65,66,67,68,],[-37,32,-29,-34,-36,32,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,-30,-31,-32,-33,]),'GE':([12,13,20,21,22,43,44,50,51,54,55,56,57,58,59,60,62,63,65,66,67,68,],[-37,33,-29,-34,-36,33,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,-30,-31,-32,-33,]),'>':([12,13,20,21,22,43,44,50,51,54,55,56,57,58,59,60,62,63,65,66,67,68,],[-37,34,-29,-34,-36,34,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,-30,-31,-32,-33,]),'<':([12,13,20,21,22,43,44,50,51,54,55,56,57,58,59,60,62,63,65,66,67,68,],[-37,35,-29,-34,-36,35,-37,-38,-19,-20,-21,-22,-23,-24,-27,-28,-26,-35,-30,-31,-32,-33,]),'+':([12,13,20,21,22,43,44,50,51,52,54,55,56,57,58,59,60,62,63,65,66,67,68,69,],[-37,36,-29,-34,-36,36,-37,-38,-19,36,36,36,36,36,36,36,36,-26,-35,-30,-31,-32,-33,36,]),'-':([12,13,20,21,22,43,44,50,51,52,54,55,56,57,58,59,60,62,63,65,66,67,68,69,],[-37,37,-29,-34,-36,37,-37,-38,-19,37,37,37,37,37,37,37,37,-26,-35,-30,-31,-32,-33,37,]),'STR':([14,],[39,]),'{':([45,],[64,]),'UNTIL':([73,],[75,]),'ELSE':([76,],[78,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'instrs':([2,64,72,77,80,],[3,71,74,79,82,]),'instr':([2,3,64,71,72,74,77,79,80,82,],[4,25,4,25,4,25,4,25,4,25,]),'atr':([2,3,64,71,72,74,77,79,80,82,],[5,5,5,5,5,5,5,5,5,5,]),'endline':([2,3,5,7,8,64,71,72,74,77,79,80,82,],[6,6,26,27,28,6,6,6,6,6,6,6,6,]),'write':([2,3,64,71,72,74,77,79,80,82,],[7,7,7,7,7,7,7,7,7,7,]),'read':([2,3,64,71,72,74,77,79,80,82,],[8,8,8,8,8,8,8,8,8,8,]),'cond':([2,3,64,71,72,74,77,79,80,82,],[9,9,9,9,9,9,9,9,9,9,]),'cycle':([2,3,64,71,72,74,77,79,80,82,],[10,10,10,10,10,10,10,10,10,10,]),'lexpr':([2,3,18,23,29,41,64,71,72,74,77,79,80,82,],[11,11,42,50,51,61,11,11,11,11,11,11,11,11,]),'expr':([2,3,18,23,29,30,31,32,33,34,35,36,37,41,53,64,71,72,74,77,79,80,82,],[13,13,43,13,13,52,54,55,56,57,58,59,60,13,69,13,13,13,13,13,13,13,13,]),'term':([2,3,18,23,29,30,31,32,33,34,35,36,37,41,53,64,71,72,74,77,79,80,82,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'par':([2,3,18,23,29,30,31,32,33,34,35,36,37,41,46,47,48,49,53,64,71,72,74,77,79,80,82,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,65,66,67,68,21,21,21,21,21,21,21,21,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> MAIN instrs END','main',3,'p_MAIN','TPyacc.py',78),
  ('instrs -> instrs instr','instrs',2,'p_Instrs','TPyacc.py',88),
  ('instrs -> instr','instrs',1,'p_InstrSING','TPyacc.py',93),
  ('instr -> atr endline','instr',2,'p_Instr','TPyacc.py',100),
  ('instr -> write endline','instr',2,'p_Instr','TPyacc.py',101),
  ('instr -> read endline','instr',2,'p_Instr','TPyacc.py',102),
  ('instr -> endline','instr',1,'p_Instr','TPyacc.py',103),
  ('instr -> cond','instr',1,'p_Instr','TPyacc.py',104),
  ('instr -> cycle','instr',1,'p_Instr','TPyacc.py',105),
  ('instr -> lexpr','instr',1,'p_Instr','TPyacc.py',106),
  ('instr -> <empty>','instr',0,'p_Instr','TPyacc.py',107),
  ('endline -> ;','endline',1,'p_end','TPyacc.py',114),
  ('cond -> IF ( lexpr ) START instrs START ELSE START instrs END','cond',11,'p_cond','TPyacc.py',118),
  ('cycle -> REPEATE START { instrs } UNTIL ( instrs ) END','cycle',10,'p_repeat','TPyacc.py',125),
  ('write -> WRITE ID','write',2,'p_WRITE','TPyacc.py',132),
  ('write -> WRITE STR','write',2,'p_WRITESTR','TPyacc.py',138),
  ('atr -> ID = expr','atr',3,'p_atr','TPyacc.py',143),
  ('read -> READ ID','read',2,'p_READ','TPyacc.py',155),
  ('lexpr -> lexpr AND lexpr','lexpr',3,'p_Cond','TPyacc.py',168),
  ('lexpr -> expr EQ expr','lexpr',3,'p_LEXPR_EQ','TPyacc.py',173),
  ('lexpr -> expr LE expr','lexpr',3,'p_LEXPR_LE','TPyacc.py',180),
  ('lexpr -> expr GE expr','lexpr',3,'p_LEXPR_GE','TPyacc.py',185),
  ('lexpr -> expr > expr','lexpr',3,'p_LEXPR_MAIOR','TPyacc.py',189),
  ('lexpr -> expr < expr','lexpr',3,'p_LEXPR_MENOR','TPyacc.py',193),
  ('lexpr -> expr','lexpr',1,'p_LEXPR_EXPR','TPyacc.py',197),
  ('lexpr -> ( lexpr )','lexpr',3,'p_LEXPR','TPyacc.py',202),
  ('expr -> expr + expr','expr',3,'p_EXPR_PLUS','TPyacc.py',209),
  ('expr -> expr - expr','expr',3,'p_EXPR_MINUS','TPyacc.py',213),
  ('expr -> term','expr',1,'p_EXPR_TERM','TPyacc.py',221),
  ('term -> term * par','term',3,'p_TERM_MUL','TPyacc.py',228),
  ('term -> term / par','term',3,'p_TERM_DIV','TPyacc.py',232),
  ('term -> term % par','term',3,'p_TERM_MOD','TPyacc.py',236),
  ('term -> term AND par','term',3,'p_TERM_AND','TPyacc.py',240),
  ('term -> par','term',1,'p_TERM_par','TPyacc.py',244),
  ('par -> ( expr )','par',3,'p_PAR_EXPR','TPyacc.py',251),
  ('par -> NUM','par',1,'p_PAR_NUM','TPyacc.py',255),
  ('par -> ID','par',1,'p_PAR_ID','TPyacc.py',259),
  ('par -> NOT lexpr','par',2,'p_PAR_NOT_EXPR','TPyacc.py',264),
]
